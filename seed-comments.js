const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

async function seedComments() {
  console.log('üå± Seeding comments...');

  try {
    // Get the first post and user
    const posts = await prisma.post.findMany({ take: 3 });
    const users = await prisma.user.findMany({ take: 2 });

    if (posts.length === 0) {
      console.log('‚ùå No posts found. Please seed posts first.');
      return;
    }

    // Create sample comments
    const comments = [
      {
        content: 'B√†i vi·∫øt r·∫•t hay v√† b·ªï √≠ch! C·∫£m ∆°n t√°c gi·∫£ ƒë√£ chia s·∫ª nh·ªØng ki·∫øn th·ª©c qu√Ω b√°u n√†y.',
        postId: posts[0].id,
        authorName: 'Nguy·ªÖn VƒÉn A',
        authorEmail: 'nguyenvana@example.com',
        authorWebsite: 'https://nguyenvana.com',
        authorIp: '192.168.1.1',
        status: 'APPROVED',
        userId: users[0]?.id || null,
      },
      {
        content: 'M√¨nh c√≥ m·ªôt c√¢u h·ªèi v·ªÅ ph·∫ßn n√†y. C√≥ th·ªÉ gi·∫£i th√≠ch r√µ h∆°n ƒë∆∞·ª£c kh√¥ng?',
        postId: posts[0].id,
        authorName: 'Tr·∫ßn Th·ªã B',
        authorEmail: 'tranthib@example.com',
        authorIp: '192.168.1.2',
        status: 'PENDING',
        userId: users[1]?.id || null,
      },
      {
        content: 'Th√¥ng tin r·∫•t h·ªØu √≠ch, ƒë√£ bookmark ƒë·ªÉ ƒë·ªçc l·∫°i sau!',
        postId: posts[1]?.id || posts[0].id,
        authorName: 'L√™ VƒÉn C',
        authorEmail: 'levanc@example.com',
        authorIp: '192.168.1.3',
        status: 'APPROVED',
      },
      {
        content: 'Spam comment n√†y l√† ƒë·ªÉ test ch·ª©c nƒÉng spam detection.',
        postId: posts[0].id,
        authorName: 'Spam User',
        authorEmail: 'spam@spam.com',
        authorIp: '192.168.1.4',
        status: 'SPAM',
      },
      {
        content: 'Comment n√†y b·ªã t·ª´ ch·ªëi v√¨ n·ªôi dung kh√¥ng ph√π h·ª£p.',
        postId: posts[0].id,
        authorName: 'Bad User',
        authorEmail: 'baduser@example.com',
        authorIp: '192.168.1.5',
        status: 'TRASH',
      },
      {
        content: 'B√†i vi·∫øt tuy·ªát v·ªùi! T√¥i ƒë√£ h·ªçc ƒë∆∞·ª£c r·∫•t nhi·ªÅu ƒëi·ªÅu m·ªõi t·ª´ b√†i n√†y. C·∫£m ∆°n t√°c gi·∫£!',
        postId: posts[1]?.id || posts[0].id,
        authorName: 'Ph·∫°m Th·ªã D',
        authorEmail: 'phamthid@example.com',
        authorWebsite: 'https://phamthid.blog',
        authorIp: '192.168.1.6',
        status: 'APPROVED',
      },
      {
        content: 'C√≥ th·ªÉ l√†m m·ªôt video h∆∞·ªõng d·∫´n chi ti·∫øt v·ªÅ ch·ªß ƒë·ªÅ n√†y kh√¥ng?',
        postId: posts[2]?.id || posts[0].id,
        authorName: 'Ho√†ng VƒÉn E',
        authorEmail: 'hoangvane@example.com',
        authorIp: '192.168.1.7',
        status: 'PENDING',
      },
      {
        content: 'M√¨nh ƒë√£ √°p d·ª•ng theo h∆∞·ªõng d·∫´n v√† th√†nh c√¥ng. Thanks!',
        postId: posts[1]?.id || posts[0].id,
        authorName: 'ƒê·∫∑ng Th·ªã F',
        authorEmail: 'dangthif@example.com',
        authorIp: '192.168.1.8',
        status: 'APPROVED',
        userId: users[0]?.id || null,
      }
    ];

    const createdComments = [];
    
    for (const comment of comments) {
      const created = await prisma.comment.create({
        data: comment,
      });
      createdComments.push(created);
      console.log(`‚úÖ Created comment: ${comment.authorName} - ${comment.content.substring(0, 50)}...`);
    }

    // Create some replies to the first comment
    const replies = [
      {
        content: 'C·∫£m ∆°n b·∫°n ƒë√£ ƒë·ªçc! R·∫•t vui khi b√†i vi·∫øt gi√∫p √≠ch ƒë∆∞·ª£c cho b·∫°n.',
        postId: posts[0].id,
        parentId: createdComments[0].id,
        authorName: 'Admin',
        authorEmail: 'admin@example.com',
        authorIp: '127.0.0.1',
        status: 'APPROVED',
        userId: users[0]?.id || null,
      },
      {
        content: 'T√¥i c≈©ng ƒë·ªìng √Ω v·ªõi b·∫°n! B√†i vi·∫øt th·ª±c s·ª± ch·∫•t l∆∞·ª£ng.',
        postId: posts[0].id,
        parentId: createdComments[0].id,
        authorName: 'Ng∆∞·ªùi d√πng kh√°c',
        authorEmail: 'user@example.com',
        authorIp: '192.168.1.10',
        status: 'APPROVED',
      }
    ];

    for (const reply of replies) {
      await prisma.comment.create({
        data: reply,
      });
      console.log(`‚úÖ Created reply: ${reply.authorName} - ${reply.content.substring(0, 50)}...`);
    }

    console.log('üéâ Comments seeded successfully!');
    console.log(`üìä Created ${comments.length} comments and ${replies.length} replies`);

  } catch (error) {
    console.error('‚ùå Error seeding comments:', error);
    throw error;
  }
}

async function main() {
  try {
    await seedComments();
  } catch (error) {
    console.error('‚ùå Seeding failed:', error);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
}

// Run if called directly
if (require.main === module) {
  main();
}

module.exports = { seedComments };
